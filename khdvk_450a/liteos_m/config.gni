# Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Kernel type, e.g. "linux", "liteos_a", "liteos_m".
kernel_type = "liteos_m"

# Kernel version.
kernel_version = "3.0.0"

# Board CPU type, e.g. "cortex-a7", "riscv32".
board_cpu = "cortex-m4"

# Board arch, e.g.  "armv7-a", "rv32imac".
board_arch = ""

# Toolchain name used for system compiling.
# E.g. gcc-arm-none-eabi, arm-linux-harmonyeabi-gcc, ohos-clang,  riscv32-unknown-elf.
# Note: The default toolchain is "ohos-clang". It's not mandatory if you use the default toolchain.
board_toolchain = "arm-none-eabi-gcc"

use_board_toolchain = true

# The toolchain path installed, it's not mandatory if you have added toolchain path to your ~/.bashrc.
board_toolchain_path = ""

# Compiler prefix.
board_toolchain_prefix = "arm-none-eabi-"

# Compiler type, "gcc" or "clang".
board_toolchain_type = "gcc"

# Board related common compile flags.
board_cflags = [
  "-mcpu=cortex-m4",
  "-mfpu=fpv4-sp-d16",
  "-mfloat-abi=hard",
  "-mthumb",
  "-Og",
  "-Wall",
  "-fno-stack-protector",
  "-DGD32F450",
  "-D__FPU_PRESENT",
  "-D__LITEOS_M__",
  "-DLOSCFG_BASE_CORE_HILOG=1",
]

# add force link library in board_cflags
#   config.json parse
if (product_path != "") {
  product_conf = read_file("${product_path}/config.json", "json")
  param_list = product_conf.param_list
  force_link_lib_list = param_list.force_link_lib_list

  force_lib_flag = [
    "-Llibs",
    "-Wl,--whole-archive",
  ]

  foreach(item, force_link_lib_list) {
    if (item.enable == "true") {
      foreach(lib, item.force_link_libs) {
        temp = "-l"
        temp += lib
        force_lib_flag += [ temp ]
      }
    }
  }

  force_lib_flag += [ "-Wl,--no-whole-archive" ]
}

board_asmflags = [
  "-Og",
  "-Wall",
  "-fdata-sections",
  "-ffunction-sections",
]

board_cxx_flags = board_cflags

board_cxx_flags += [
  "-fno-rtti",
  "-std=c++11",
]

board_ld_flags = [
  "-lstdc++",
  "-lsupc++",
  "--specs=nano.specs",
  "-Wl,--wrap=_malloc_r",
  "-Wl,--wrap=_realloc_r",
  "-Wl,--wrap=_reallocf_r",
  "-Wl,--wrap=_free_r",
  "-Wl,--wrap=_memalign_r",
  "-Wl,--wrap=_malloc_usable_size_r",
  "-Wl,--wrap=printf",
  "-Wl,--wrap=sprintf",
  "-Wl,--wrap=snprintf",
  "-Wl,--wrap=vsnprintf",
  "-Wl,--wrap=vprintf",
]

# Board related headfiles search path.
board_include_dirs = [
  "//utils/native/lite/include",
  "//base/iothardware/peripheral/interfaces/inner_api",
]

# Board adapter dir for OHOS components.
board_adapter_dir = "//device/board/kaihong/khdvk_450a/adapter"

# Sysroot path.
board_configed_sysroot = ""

# Board storage type, it used for file system generation.
storage_type = ""
